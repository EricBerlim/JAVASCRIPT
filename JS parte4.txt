-----------------------------------------------------
JAVASCRIPT - PARTE 4
-----------------------------------------------------

ESTRUTURAS de REPETIÇÃO:

WHILE - teste lógico no início.

Enquanto a condição for true, executa:

while (condição) {
	
	comando true
}

Se for false, sai do laço.

Exemplo:

function comerPizza() {

	while(temFatia()){
	
		comerFatia()
	}	
}

DO - teste lógico no final.

Faça isso, enquanto a condição for true:

Exemplo:

do {

} while (condição)

-----------------------------------------------------
FOR:

Se o teste for TRUE, executa o bloco.

for (inicio; teste; incremento){
	
}

Após executar é realizado o incremento.

Se o teste for FALSE, sai da estrutura.
 
Exemplo:

for (var c = 1; c <= 5; c++) {
    console.log(c)    
}

OU

var c = 1
while (c <= 5) {
    console.log(c)
    c++
}

Exemplo:

		HTML:
<body onload="carregar()">
    <header>
        <h1>Contador</h1>
    </header>

    <section>
        <div id="dados">
            <p>Início: <input type="number" name="inicio" id="txtI"></p>
            
            <p>Fim: <input type="number" name="fim" id="txtF"></p>
            
            <p>Passo: <input type="number" name="passo" id="txtP"></p>
            
            <p><input type="button" value="Contar" onclick="contar()"></p>
        </div>
        <div id="res">
            Preparando a contagem...
        </div>
    </section>
    
    <footer>
        <p>&copy;</p>
    </footer>
    <script src="script.js"></script>
</body>

		JAVASCRIPT:
function contar() {
    let inicio = document.getElementById('txtI')
    let fim = document.getElementById('txtF')
    let passo = document.getElementById('txtP')
    let res = document.getElementById('res')

    if (inicio.value.length == 0 || fim.value.length == 0 || passo.value.length == 0) {
        alert('[ERRO] Dados não inseridos!')

    } else {
        res.innerHTML = 'Contando: '
        let i = Number(inicio.value)
        let f = Number(fim.value)
        let p = Number(passo.value)

        for (let c = i; c <= f; c += p){
            res.innerHTML += ` ${c} \u{1F449}`
        }

        res.innerHTML += ` \u{1F3C1}`
    }
}

Contagem Crescente e Decrescente:

if (inicio.value.length == 0 || fim.value.length == 0 || passo.value.length == 0) {
        alert('[ERRO] Dados não inseridos!')

    } else {
        res.innerHTML = 'Contando: '
        let i = Number(inicio.value)
        let f = Number(fim.value)
        let p = Number(passo.value)

        if (i < f) {
            //Contagem Crescente
            for (let c = i; c <= f; c += p){
                res.innerHTML += ` ${c} \u{1F449}`
            }

        } else {
            //Contagem Decrescente
            for (let c = i; c >= f; c -= p){
                res.innerHTML += ` ${c} \u{1F449}`
            }
        }
        res.innerHTML += ` \u{1F3C1}`
    }
	
-----------------------------------------------------
INSERIR EMOJI:

Código do emoji: U+1F47D
No JavaScript: \u{1F47D}

-----------------------------------------------------

ADICIONAR ELEMENTOS:

	HTML:
<div>
    <select name="tabuada" id="selTab" size="10">
	
	</select>
</div>

	JAVASCRIPT:
function tabuada() {
    let num = document.getElementById('txtN')
    let tab = document.getElementById('selTab')

    tab.innerHTML = '' //Limpa antes de iniciar outra

    if (num.value.length == 0) {
        alert('Digite um número, por favor!')

    } else {
        let n = Number(num.value)
        let c = 1

        while (c <= 10) {
            let item = document.createElement('option')
            
            item.text = `${n} x ${c} = ${n*c}`
            item.value = `tab${c}`

            tab.appendChild(item)
            c++
        }
    }
}

-----------------------------------------------------
ARRAYS == VARIÁVEIS COMPOSTAS == VETORES:

Simples: só armazenam 1 valor por vez.

Compostas: armazenam vários valores em uma estrutura.

var a = [ , , ]
posições º ¹ ²

Vetor definido:
let num = [5, 8, 4]

Acrescenta um valor na posição 3:
num [3] = 6

Acrescenta valor na última posição.
num.push(7)

Para saber o comprimento:
num.length

Ordem Crescente:
num.sort()

Exemplo:

let valores = [8, 1, 7, 4, 2, 9]

for (pos = 0; pos < valores.length; pos++){
    
    console.log(`A posição ${pos} tem o valor ${valores[pos]}`)
}

FOR IN:

Para cada posição dentro da variável, faça.

for (let pos in var){

	console.log(var[pos])
}

Exemplo:

let valores = [8, 1, 7, 4, 2, 9]

for (let pos in valores) {
    
	console.log(`A posição ${pos} tem o valor ${valores[pos]}`)
}

BUSCAR VALOR:
var.indexOf(7)

let num = [5, 8, 2, 9, 3]
num.push(2)
num.sort()
console.log(num)
console.log(`O vetor tem ${num.length} posições.`)
console.log(`O primeiro valor é ${num[0]}.`)

let pos = num.indexOf(8)

if (pos == -1) {
    console.log(`O valor não foi encontrado!`)

} else {
    console.log(`O valor está na posição ${pos}`)   
}

-----------------------------------------------------
FUNÇÕES - FUNCTION:

São Ações executadas assim que são Chamadas ou em decorrência de algum Evento.

Pode receber parâmetros e retornar um Resultado.

Toda função pode ter:

- Chamada / ordem
- Parâmetros / entrada
- Ação
- Retorno

A ação não é executada automaticamente.

function ação(param){

	código
	return res
}

ação(5)

O código 'ação(5)' é a chamada da function e o valor entre parênteses será o parâmetro.

O retorno 'return res' faz voltar para a chamada que está fora do bloco de código.

function ParImp(n){

	if (n % 2 == 0){
		return 'par'
	
	} else {
		return 'ímpar'
	}
}

console.log(ParImpar(4))

Nesse caso a palavra 'ímpar' vai para dentro de 'res'

Exemplo:

function soma(n1=0, n2=0) {
    return n1 + n2    
}

console.log(soma(7))

Caso não sejam passados 2 parâmetros, será 0.

Function dentro de Variável:

let v = function (x) {
    return x*2
}

console.log(v(5))

Function para saber Fatorial:

function fatorial(n) {
    let fat = 1

    for (let c = n; c > 1; c--){
        fat *= c
    }
    return fat   
}

console.log(fatorial(5))

-----------------------------------------------------
RECURSIVIDADE:

Quando uma function chama ela mesma.

function fatorial(n) {
    if (n == 1) {
        return 1

    } else {
        return n * fatorial(n - 1)
    }
}

console.log(fatorial(5))

-----------------------------------------------------
